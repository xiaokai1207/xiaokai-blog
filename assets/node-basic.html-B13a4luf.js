import{_ as s,c as a,b as e,o as l}from"./app-dm7EWZd7.js";const i={};function p(t,n){return l(),a("div",null,n[0]||(n[0]=[e(`<h1 id="node-js-基础" tabindex="-1"><a class="header-anchor" href="#node-js-基础"><span>Node.js 基础</span></a></h1><h2 id="_1-什么是-node-js" tabindex="-1"><a class="header-anchor" href="#_1-什么是-node-js"><span>1.什么是 Node.js</span></a></h2><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。它让 JavaScript 可以脱离浏览器运行在服务器端，使 JavaScript 可以进行网络编程，实现很多原本在服务器端才能实现的功能。</p><h3 id="node-js-的特点" tabindex="-1"><a class="header-anchor" href="#node-js-的特点"><span>Node.js 的特点</span></a></h3><ul><li><p>单线程</p><ul><li>单线程意味着 Node.js 在同一时间只能执行一个任务，不能同时执行多个任务。</li><li>单线程的优点是： <ul><li>简单易学</li><li>避免了多线程的复杂性</li><li>避免了线程切换的开销</li><li>避免了死锁和竞态条件</li></ul></li></ul></li><li><p>非阻塞 I/O</p><ul><li>非阻塞 I/O 意味着 Node.js 在执行 I/O 操作时，不会阻塞主线程，而是会立即返回结果。</li><li>非阻塞 I/O 的优点是： <ul><li>提高了程序的并发能力</li><li>减少了线程切换的开销</li><li>减少了死锁和竞态条件</li></ul></li></ul></li><li><p>事件驱动</p><ul><li>事件驱动意味着 Node.js 在执行任务时，会根据事件的发生来决定任务的执行顺序。</li><li>事件驱动的优点是： <ul><li>提高了程序的并发能力</li><li>减少了线程切换的开销</li><li>减少了死锁和竞态条件</li></ul></li></ul></li><li><p>轻量且高效</p><ul><li>Node.js 的轻量和高效体现在它的内存管理和垃圾回收机制上。</li></ul></li></ul><h3 id="node-js-的应用场景" tabindex="-1"><a class="header-anchor" href="#node-js-的应用场景"><span>Node.js 的应用场景</span></a></h3><ul><li>服务器端开发</li><li>命令行工具</li><li>数据处理和分析</li><li>实时应用</li><li>微服务架构</li><li>构建工具</li><li>测试和自动化</li></ul><h2 id="_2-node-js-的安装" tabindex="-1"><a class="header-anchor" href="#_2-node-js-的安装"><span>2.Node.js 的安装</span></a></h2><h3 id="安装-node-js" tabindex="-1"><a class="header-anchor" href="#安装-node-js"><span>安装 Node.js</span></a></h3><p>Node.js 的安装非常简单，只需要从官网下载安装包并安装即可。<a href="https://nodejs.org" target="_blank" rel="noopener noreferrer">nodejs 官网</a>。但我更推荐使用多版本管理工具来安装和管理 Node.js 版本。</p><h3 id="多版本管理工具-volta" tabindex="-1"><a class="header-anchor" href="#多版本管理工具-volta"><span>多版本管理工具 Volta</span></a></h3><p>Volta 是一个 Node.js 的多版本管理工具，它可以帮助我们方便地安装和管理多个 Node.js 版本，其他类似的工具还有 nvm、n 等。</p><h3 id="为什么选择-volta" tabindex="-1"><a class="header-anchor" href="#为什么选择-volta"><span>为什么选择 Volta</span></a></h3><ul><li>版本管理简单：Volta 可以帮助我们方便地安装和管理多个 Node.js 版本，且不需要复杂的配置</li><li>跨平台：Volta 支持 Windows、macOS 和 Linux 等多个平台</li><li>项目隔离：Volta 可以帮助我们方便地管理不同项目的 Node.js 版本</li></ul><p>最重要的一点就是项目隔离，比如我需要一个项目使用 Node.js 14，另一个项目使用 Node.js 16，使用 Volta 就可以很方便地管理，不需要手动切换，只需要在 package.json 中指定即可。</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;volta&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;node&quot;</span><span class="token operator">:</span> <span class="token string">&quot;16.20.2&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-创建并管理项目" tabindex="-1"><a class="header-anchor" href="#_3-创建并管理项目"><span>3.创建并管理项目</span></a></h2><h3 id="使用-npm-初始化项目" tabindex="-1"><a class="header-anchor" href="#使用-npm-初始化项目"><span>使用 npm 初始化项目</span></a></h3><p>npm 是 Node.js 的包管理工具，我们通常使用它来初始化项目。</p><ol><li>创建项目目录</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">mkdir</span> my-project</span>
<span class="line"><span class="token builtin class-name">cd</span> my-project</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>初始化项目</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> init</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行这个命令后，会提示我们输入项目信息，比如项目名称、版本、描述等，我们可以直接回车使用默认值。</p><p>最终会生成一个 package.json 文件，里面记录了项目的基本信息和依赖。</p><h3 id="安装依赖" tabindex="-1"><a class="header-anchor" href="#安装依赖"><span>安装依赖</span></a></h3><p>项目创建完成后，通常需要安装一些依赖，比如 express、axios 等。这里我们以 express 为例。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> express</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行这个命令后，会在 node_modules 目录下安装 express 及其依赖。</p><h2 id="_4-编写与调试-nodejs-程序" tabindex="-1"><a class="header-anchor" href="#_4-编写与调试-nodejs-程序"><span>4.编写与调试 nodejs 程序</span></a></h2><p>接下来，我们编写一个简单的 express 程序，并使用 npm 进行调试。</p><h3 id="创建一个简单的服务器" tabindex="-1"><a class="header-anchor" href="#创建一个简单的服务器"><span>创建一个简单的服务器</span></a></h3><p>在项目根目录下创建一个 index.js 文件，并编写以下代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 定义一个路由</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello Node.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 启动服务器</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Server is running on port 3000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码定义了一个简单的 express 服务器，当访问根路由时，会返回 &quot;Hello Node.js&quot;。</p><h3 id="运行项目" tabindex="-1"><a class="header-anchor" href="#运行项目"><span>运行项目</span></a></h3><p>在项目目录中运行以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">node</span> index.js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>打开浏览器，访问 http://localhost:3000，可以看到页面返回了 &quot;Hello Node.js&quot;。</p><h3 id="使用-npm-脚本调试" tabindex="-1"><a class="header-anchor" href="#使用-npm-脚本调试"><span>使用 npm 脚本调试</span></a></h3><p>为了方便调试，我们可以在 package.json 中添加一个 start 脚本，这样我们只需要运行 <code>npm start</code> 就可以启动服务器。</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node index.js&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以运行 <code>npm start</code> 来启动服务器，这与直接运行 <code>node index.js</code> 的效果是一样的，但更符合 npm 的项目管理规范。</p><h2 id="_5-使用-pnpm-管理项目" tabindex="-1"><a class="header-anchor" href="#_5-使用-pnpm-管理项目"><span>5.使用 pnpm 管理项目</span></a></h2><p>pnpm 是 Node.js 的包管理工具，它可以帮助我们方便地管理项目依赖。</p><h3 id="为什么选择-pnpm" tabindex="-1"><a class="header-anchor" href="#为什么选择-pnpm"><span>为什么选择 pnpm</span></a></h3><p>和 npm 一样，pnpm 也是 Node.js 的包管理工具，但它有以下优点：</p><ol><li>更高效的磁盘空间利用 <ul><li>pnpm 使用硬链接和符号链接来共享依赖包</li><li>相同的依赖包在硬盘上只会被存储一次</li><li>大大节省磁盘空间，特别是在管理多个项目时</li></ul></li><li>更快的安装速度 <ul><li>由于使用硬链接，不需要重复复制相同的包</li><li>安装过程更快，特别是在已经缓存了依赖的情况下</li><li>并行安装提升效率</li></ul></li><li>严格的依赖管理 <ul><li>使用符号链接创建非扁平的 node_modules 结构</li><li>防止访问未声明的依赖（幽灵依赖）</li><li>更符合 Node.js 模块解析算法的设计理念</li></ul></li><li>更好的单体仓库(Monorepo)支持 <ul><li>内置的工作空间(workspace)功能</li><li>支持不同项目之间共享依赖</li><li>更容易管理多包项目</li></ul></li><li>更安全的依赖管理 <ul><li>避免依赖提升带来的问题</li><li>更好的版本控制和冲突处理</li><li>降低安全风险</li></ul></li><li>向后兼容 <ul><li>完全兼容 npm 的功能</li><li>可以直接替换 npm 使用</li><li>支持现有的 package.json 配置</li></ul></li></ol><h3 id="安装-pnpm" tabindex="-1"><a class="header-anchor" href="#安装-pnpm"><span>安装 pnpm</span></a></h3><p>如果使用 Volta 管理项目，只需要运行以下命令即可安装 pnpm：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">volta <span class="token function">install</span> <span class="token function">pnpm</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果不使用 Volta 管理项目，可以运行以下命令安装 pnpm：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token function">pnpm</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>建议以后都使用 pnpm 来管理项目，因为 pnpm 的优点实在太多了，尤其是对于多包项目(Monorepo)的支持，在前端开发中非常常见。</p><h2 id="_6-模块化" tabindex="-1"><a class="header-anchor" href="#_6-模块化"><span>6.模块化</span></a></h2><p>在 node.js 中，模块化是开发应用程序的基石。模块化可以帮助我们更好地组织代码，提高代码的复用性和可维护性。</p><p>node.js 的模块化分为 CommonJS 和 ES Modules 两种规范。</p>`,57)]))}const c=s(i,[["render",p],["__file","node-basic.html.vue"]]),d=JSON.parse('{"path":"/node/node-basic.html","title":"Node.js 基础","lang":"ch-CN","frontmatter":{},"headers":[{"level":2,"title":"1.什么是 Node.js","slug":"_1-什么是-node-js","link":"#_1-什么是-node-js","children":[{"level":3,"title":"Node.js 的特点","slug":"node-js-的特点","link":"#node-js-的特点","children":[]},{"level":3,"title":"Node.js 的应用场景","slug":"node-js-的应用场景","link":"#node-js-的应用场景","children":[]}]},{"level":2,"title":"2.Node.js 的安装","slug":"_2-node-js-的安装","link":"#_2-node-js-的安装","children":[{"level":3,"title":"安装 Node.js","slug":"安装-node-js","link":"#安装-node-js","children":[]},{"level":3,"title":"多版本管理工具 Volta","slug":"多版本管理工具-volta","link":"#多版本管理工具-volta","children":[]},{"level":3,"title":"为什么选择 Volta","slug":"为什么选择-volta","link":"#为什么选择-volta","children":[]}]},{"level":2,"title":"3.创建并管理项目","slug":"_3-创建并管理项目","link":"#_3-创建并管理项目","children":[{"level":3,"title":"使用 npm 初始化项目","slug":"使用-npm-初始化项目","link":"#使用-npm-初始化项目","children":[]},{"level":3,"title":"安装依赖","slug":"安装依赖","link":"#安装依赖","children":[]}]},{"level":2,"title":"4.编写与调试 nodejs 程序","slug":"_4-编写与调试-nodejs-程序","link":"#_4-编写与调试-nodejs-程序","children":[{"level":3,"title":"创建一个简单的服务器","slug":"创建一个简单的服务器","link":"#创建一个简单的服务器","children":[]},{"level":3,"title":"运行项目","slug":"运行项目","link":"#运行项目","children":[]},{"level":3,"title":"使用 npm 脚本调试","slug":"使用-npm-脚本调试","link":"#使用-npm-脚本调试","children":[]}]},{"level":2,"title":"5.使用 pnpm 管理项目","slug":"_5-使用-pnpm-管理项目","link":"#_5-使用-pnpm-管理项目","children":[{"level":3,"title":"为什么选择 pnpm","slug":"为什么选择-pnpm","link":"#为什么选择-pnpm","children":[]},{"level":3,"title":"安装 pnpm","slug":"安装-pnpm","link":"#安装-pnpm","children":[]}]},{"level":2,"title":"6.模块化","slug":"_6-模块化","link":"#_6-模块化","children":[]}],"git":{"updatedTime":1741236846000,"contributors":[{"name":"chriswlwang","username":"chriswlwang","email":"chriswlwang@tencent.com","commits":2,"url":"https://github.com/chriswlwang"}]},"filePathRelative":"node/node-basic.md","excerpt":"\\n<h2>1.什么是 Node.js</h2>\\n<p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。它让 JavaScript 可以脱离浏览器运行在服务器端，使 JavaScript 可以进行网络编程，实现很多原本在服务器端才能实现的功能。</p>\\n<h3>Node.js 的特点</h3>\\n<ul>\\n<li>\\n<p>单线程</p>\\n<ul>\\n<li>单线程意味着 Node.js 在同一时间只能执行一个任务，不能同时执行多个任务。</li>\\n<li>单线程的优点是：\\n<ul>\\n<li>简单易学</li>\\n<li>避免了多线程的复杂性</li>\\n<li>避免了线程切换的开销</li>\\n<li>避免了死锁和竞态条件</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>非阻塞 I/O</p>\\n<ul>\\n<li>非阻塞 I/O 意味着 Node.js 在执行 I/O 操作时，不会阻塞主线程，而是会立即返回结果。</li>\\n<li>非阻塞 I/O 的优点是：\\n<ul>\\n<li>提高了程序的并发能力</li>\\n<li>减少了线程切换的开销</li>\\n<li>减少了死锁和竞态条件</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>事件驱动</p>\\n<ul>\\n<li>事件驱动意味着 Node.js 在执行任务时，会根据事件的发生来决定任务的执行顺序。</li>\\n<li>事件驱动的优点是：\\n<ul>\\n<li>提高了程序的并发能力</li>\\n<li>减少了线程切换的开销</li>\\n<li>减少了死锁和竞态条件</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>轻量且高效</p>\\n<ul>\\n<li>Node.js 的轻量和高效体现在它的内存管理和垃圾回收机制上。</li>\\n</ul>\\n</li>\\n</ul>"}');export{c as comp,d as data};
